// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v4.25.3
// source: FileServer.proto

package XcXcPanFileServer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DownloadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadChunkRequest) Reset() {
	*x = DownloadChunkRequest{}
	mi := &file_FileServer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkRequest) ProtoMessage() {}

func (x *DownloadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkRequest.ProtoReflect.Descriptor instead.
func (*DownloadChunkRequest) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{0}
}

func (x *DownloadChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DownloadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadChunkResponse) Reset() {
	*x = DownloadChunkResponse{}
	mi := &file_FileServer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkResponse) ProtoMessage() {}

func (x *DownloadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkResponse.ProtoReflect.Descriptor instead.
func (*DownloadChunkResponse) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{1}
}

func (x *DownloadChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DownloadChunkResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DelChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelChunkRequest) Reset() {
	*x = DelChunkRequest{}
	mi := &file_FileServer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChunkRequest) ProtoMessage() {}

func (x *DelChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChunkRequest.ProtoReflect.Descriptor instead.
func (*DelChunkRequest) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{2}
}

func (x *DelChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DelChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelChunkResponse) Reset() {
	*x = DelChunkResponse{}
	mi := &file_FileServer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChunkResponse) ProtoMessage() {}

func (x *DelChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChunkResponse.ProtoReflect.Descriptor instead.
func (*DelChunkResponse) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{3}
}

func (x *DelChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DelChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkRequest) Reset() {
	*x = UploadChunkRequest{}
	mi := &file_FileServer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkRequest) ProtoMessage() {}

func (x *UploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{4}
}

func (x *UploadChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *UploadChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkResponse) Reset() {
	*x = UploadChunkResponse{}
	mi := &file_FileServer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkResponse) ProtoMessage() {}

func (x *UploadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileServer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkResponse.ProtoReflect.Descriptor instead.
func (*UploadChunkResponse) Descriptor() ([]byte, []int) {
	return file_FileServer_proto_rawDescGZIP(), []int{5}
}

func (x *UploadChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_FileServer_proto protoreflect.FileDescriptor

var file_FileServer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0xab, 0x02, 0x0a, 0x12, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x58, 0x63, 0x58, 0x63, 0x50,
	0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x27, 0x2e,
	0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x14, 0x5a, 0x12, 0x2f, 0x58, 0x63, 0x58, 0x63, 0x50, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FileServer_proto_rawDescOnce sync.Once
	file_FileServer_proto_rawDescData = file_FileServer_proto_rawDesc
)

func file_FileServer_proto_rawDescGZIP() []byte {
	file_FileServer_proto_rawDescOnce.Do(func() {
		file_FileServer_proto_rawDescData = protoimpl.X.CompressGZIP(file_FileServer_proto_rawDescData)
	})
	return file_FileServer_proto_rawDescData
}

var file_FileServer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_FileServer_proto_goTypes = []any{
	(*DownloadChunkRequest)(nil),  // 0: XcXcPanFileServer.DownloadChunkRequest
	(*DownloadChunkResponse)(nil), // 1: XcXcPanFileServer.DownloadChunkResponse
	(*DelChunkRequest)(nil),       // 2: XcXcPanFileServer.DelChunkRequest
	(*DelChunkResponse)(nil),      // 3: XcXcPanFileServer.DelChunkResponse
	(*UploadChunkRequest)(nil),    // 4: XcXcPanFileServer.UploadChunkRequest
	(*UploadChunkResponse)(nil),   // 5: XcXcPanFileServer.UploadChunkResponse
}
var file_FileServer_proto_depIdxs = []int32{
	4, // 0: XcXcPanFileServer.XcXcPanFileService.UploadChunk:input_type -> XcXcPanFileServer.UploadChunkRequest
	2, // 1: XcXcPanFileServer.XcXcPanFileService.DelChunk:input_type -> XcXcPanFileServer.DelChunkRequest
	0, // 2: XcXcPanFileServer.XcXcPanFileService.DownloadChunk:input_type -> XcXcPanFileServer.DownloadChunkRequest
	5, // 3: XcXcPanFileServer.XcXcPanFileService.UploadChunk:output_type -> XcXcPanFileServer.UploadChunkResponse
	3, // 4: XcXcPanFileServer.XcXcPanFileService.DelChunk:output_type -> XcXcPanFileServer.DelChunkResponse
	1, // 5: XcXcPanFileServer.XcXcPanFileService.DownloadChunk:output_type -> XcXcPanFileServer.DownloadChunkResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_FileServer_proto_init() }
func file_FileServer_proto_init() {
	if File_FileServer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FileServer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_FileServer_proto_goTypes,
		DependencyIndexes: file_FileServer_proto_depIdxs,
		MessageInfos:      file_FileServer_proto_msgTypes,
	}.Build()
	File_FileServer_proto = out.File
	file_FileServer_proto_rawDesc = nil
	file_FileServer_proto_goTypes = nil
	file_FileServer_proto_depIdxs = nil
}
